{
  "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2025-08-27T11:20:14+02:00",
  "name": "PicoLimbo",
  "author": "quozul@pm.me",
  "description": "A lightweight Minecraft server written from scratch in Rust supporting Minecraft versions from 1.7.2 up to the most recent ones.",
  "features": null,
  "docker_images": {
    "ghcr.io\/parkervcp\/yolks:alpine": "ghcr.io\/parkervcp\/yolks:alpine"
  },
  "file_denylist": [],
  "startup": ".\/pico_limbo",
  "config": {
    "files": "{\r\n    \"server.toml\": {\r\n        \"parser\": \"file\",\r\n        \"find\": {\r\n            \"bind = \": \"bind = \\\"0.0.0.0:{{server.build.default.port}}\\\"\"\r\n        }\r\n    }\r\n}",
    "startup": "{\r\n    \"done\": \"Listening on:\"\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!\/bin\/sh\r\n# PicoLimbo Installation Script\r\nset -e\r\n\r\napk add --no-cache curl jq\r\n\r\nUNAME_M=\"$(uname -m)\"\r\ncase \"$UNAME_M\" in\r\n  x86_64)   ARCH='x86_64' ;;\r\n  aarch64)  ARCH='aarch64' ;;\r\n  *)\r\n    echo \"ERROR: Unsupported arch: $UNAME_M\" >&2\r\n    exit 1\r\n    ;;\r\nesac\r\n\r\nGITHUB_PACKAGE=\"Quozul\/PicoLimbo\"\r\nPATTERN=\"pico_limbo_linux-${ARCH}-musl[.]tar[.]gz\"\r\n\r\nselect_asset_url() {\r\n  jq -r --arg pat \"$PATTERN\" '\r\n    .assets[].browser_download_url\r\n    | select(test($pat))\r\n  '\r\n}\r\n\r\necho \"Fetching GitHub releases metadata...\"\r\nALL_JSON=\"$(curl -s \"https:\/\/api.github.com\/repos\/$GITHUB_PACKAGE\/releases\")\"\r\nLATEST_JSON=\"$(printf '%s\\n' \"$ALL_JSON\" \\\r\n  | jq 'map(select(.prerelease==false)) | sort_by(.published_at) | reverse | .[0]')\"\r\n\r\nif [ -n \"$DOWNLOAD_URL\" ]; then\r\n  echo \"Using provided DOWNLOAD_URL\"\r\n  if ! curl -Isf \"$DOWNLOAD_URL\" >\/dev\/null; then\r\n    echo \"ERROR: Provided download URL is invalid.\" >&2\r\n    exit 1\r\n  fi\r\n\r\nelif [ -n \"$VERSION\" ] && [ \"$VERSION\" != \"latest\" ]; then\r\n  echo \"Looking for tag '$VERSION'...\"\r\n  MATCH=\"$(printf '%s\\n' \"$ALL_JSON\" \\\r\n    | jq -c --arg v \"$VERSION\" '.[] | select(.tag_name==$v)')\"\r\n  if [ -n \"$MATCH\" ]; then\r\n    DOWNLOAD_URL=\"$(printf '%s\\n' \"$MATCH\" | select_asset_url)\"\r\n  else\r\n    echo \"Warning: tag '$VERSION' not found, falling back to latest stable.\"\r\n    DOWNLOAD_URL=\"$(printf '%s\\n' \"$LATEST_JSON\" | select_asset_url)\"\r\n  fi\r\n\r\nelse\r\n  echo \"Selecting latest stable release...\"\r\n  DOWNLOAD_URL=\"$(printf '%s\\n' \"$LATEST_JSON\" | select_asset_url)\"\r\nfi\r\n\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server\r\n\r\nSERVER_BINARY=${SERVER_BINARY:-pico_limbo}\r\nARCHIVE=${DOWNLOAD_URL##*\/}\r\n\r\necho \"Downloading $ARCHIVE ...\"\r\ncurl -sSL -o \"$ARCHIVE\" \"$DOWNLOAD_URL\"\r\n\r\necho \"Extracting...\"\r\ntar -xzf \"$ARCHIVE\"\r\nrm \"$ARCHIVE\"\r\n\r\nchmod +x \"$SERVER_BINARY\"\r\n\r\necho \"-----------------------------------------\"\r\necho \"Installed PicoLimbo -> \/mnt\/server\/$SERVER_BINARY\"\r\necho \"-----------------------------------------\"",
      "container": "ghcr.io\/parkervcp\/installers:alpine",
      "entrypoint": "ash"
    }
  },
  "variables": [
    {
      "name": "Version",
      "description": "Specifies the Git tag of the release to install (e.g., `v1.6.0+mc1.21.9`). When set to `latest` (or left unset), the installer selects the newest stable release.",
      "env_variable": "VERSION",
      "default_value": "latest",
      "user_viewable": true,
      "user_editable": true,
      "rules": "string|required",
      "field_type": "text"
    }
  ]
}